import cv2
import imutils
from skimage.filters import threshold_local
import numpy as np

img_paths = ['./images/lot_a.jpg', './images/lot_b.jpg']
parking_lot = getStitchedImage(img_paths)
cv2.imshow('Original Image',parking_lot)
cv2.waitKey(0)

blue = [255,0,0]
parking_lot_padded = cv2.copyMakeBorder(parking_lot.copy(),30,30,30,30,cv2.BORDER_CONSTANT,value=blue)
cv2.imshow('Padding', parking_lot_padded)
cv2.waitKey(0)

ratio = parking_lot_padded.shape[0] / 500.0
org = parking_lot_padded.copy()
img = imutils.resize(parking_lot_padded, height = 500)
cv2.imshow('Resizing',img)
cv2.waitKey(0)


parking_lot_hsv= cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
parking_lot_binarymask = cv2.inRange(parking_lot_hsv,np.array([0,0,0]),np.array([179,30,255]))

# parking_lot_binarymask = img

cv2.imshow('Binary Mask',parking_lot_binarymask)
cv2.waitKey(0)


# gray_img = cv2.cvtColor(parking_lot_binarymask.copy(),cv2.COLOR_BGR2GRAY)
blur_img = cv2.GaussianBlur(parking_lot_binarymask.copy(),(5,5),0)
edged_img = cv2.Canny(blur_img,75,200)
cv2.imshow('Edged',edged_img)
cv2.waitKey(0)

cnts,_ = cv2.findContours(edged_img.copy(),cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
cnts = sorted(cnts,key=cv2.contourArea,reverse=True)[:5]

for c in cnts:
    peri = cv2.arcLength(c,True)
    approx = cv2.approxPolyDP(c,0.02*peri,True)
    if len(approx)==4:
        doc = approx
        break
        
p=[]

img_with_corners = img.copy()
for d in doc:
    tuple_point = tuple(d[0])
    img_with_corners = cv2.circle(img_with_corners,tuple_point,3,(0,0,255),4)
    p.append(tuple_point)
cv2.imshow('Corner points detected',img_with_corners)
cv2.waitKey(0)

# warped = four_point_transform(org, doc.reshape(4, 2) * ratio)
# warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)

rows = img.shape[0]
cols = img.shape[1]

pts1 = np.float32([p[0],p[1],p[2],p[3]])
pts2 = np.float32([[cols,0],[cols,rows],[0,rows], [0,0]])

M = cv2.getPerspectiveTransform(pts1,pts2)
imgP = cv2.warpPerspective(img,M,(cols,rows))
                           
cv2.imshow("Warped",imgP)
cv2.waitKey(0)
cv2.destroyAllWindows()